# タスク分解スキーマ
# このファイルは .sdp/<slug>/tasks.yml ファイルの構造を定義します

# 要件識別子スラッグ（例: "add-user-authentication"）
requirement: string

# この要件に対するタスク配列
tasks:
  - id: string              # タスク識別子（T-001、T-002、...）
    title: string           # 短く分かりやすいタスクタイトル
    description: string     # 作業内容の1-3行の説明

    # 作成・変更されるファイルまたは成果物
    deliverables: [string]  # 例: ["backend/internal/auth/handler.go", "frontend/pages/login.vue"]

    # 完了の定義（テスト可能な完了基準）
    dod: [string]           # 例: ["Unit tests pass", "Integration tests added", "Code reviewed"]

    # タスクのカテゴリ・種別
    labels: [string]        # 例: ["backend", "frontend", "tests", "docs", "infra"]

    # タスク依存関係（このタスクを開始する前に完了が必要なタスク）
    depends_on: [string]    # 例: ["T-001", "T-003"]

    # PERT見積もり
    estimate:
      method: pert          # 常に "pert"（Program Evaluation and Review Technique）
      optimistic: number    # 楽観的見積もり時間（最小予想時間）
      most_likely: number   # 最も可能性が高い時間（現実的な見積もり）
      pessimistic: number   # 悲観的見積もり時間（最大予想時間）
      unit: h               # 常に "h"（時間）

    # このタスクのオプションのリスクメモ
    risks: string           # 例: "外部APIが不安定な可能性があり、エラーハンドリングが必要"

# クリティカルパス: 最長の依存関係チェーンを表すタスクIDの配列
# プロジェクトの最小所要期間を決定します
critical_path: [string]     # 例: ["T-001", "T-003", "T-007", "T-010"]

# ロールアップ: 全タスクから計算されたプロジェクトレベルのメトリクス
rollup:
  # PERT期待値の合計: (optimistic + 4*most_likely + pessimistic) / 6
  expected_hours: number

  # 伝播標準偏差: sqrt(分散の合計)
  # 各タスクの分散 = ((pessimistic - optimistic) / 6)^2
  stddev_hours: number

  # 信頼度レベル: low | med | high
  confidence: string

  # 信頼度レベルの簡潔な説明
  rationale: string         # 例: "高: 要件が十分理解されており、経験豊富なチーム、外部依存が最小限"

# Example:
# requirement: "add-user-authentication"
# tasks:
#   - id: "T-001"
#     title: "Setup project structure"
#     description: "Create initial directory structure and configuration files for the authentication module."
#     deliverables:
#       - "backend/internal/auth/handler.go"
#       - "backend/internal/auth/service.go"
#       - "backend/internal/auth/repository.go"
#     dod:
#       - "Directory structure created according to project layout"
#       - "Basic handler/service/repository interfaces defined"
#       - "Unit test files created with placeholder tests"
#     labels: ["backend", "setup"]
#     depends_on: []
#     estimate:
#       method: pert
#       optimistic: 2
#       most_likely: 3
#       pessimistic: 5
#       unit: h
#     risks: "None - straightforward setup task"
#
# critical_path: ["T-001", "T-003", "T-005"]
# rollup:
#   expected_hours: 45.5
#   stddev_hours: 6.2
#   confidence: "high"
#   rationale: "All tasks are well-defined with clear deliverables and experienced team members assigned"